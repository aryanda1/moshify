:root {
  --color-primary: #2584ff;
  --color-secondary: #00d9ff;
  --color-accent: #ff3400;
  --color-headings: #210e6b;
  --color-body: #918ca4;
  --color-body-darker: #5c5577;
  --border-color: #ccc;
  --border-radius: 30px;
}

::selection {
  background: var(--color-primary);
  color: #fff;
}

*,
*::before,
*::after {
  box-sizing: border-box;
}

/* Typography */

html {
  font-size: 62.5%;
}

body {
  font-family: Inter, Arial, Helvetica, sans-serif;
  color: var(--color-body);
  line-height: 1.5;
  font-size: 2.4rem; /*For body texts*/
}

h1,
h2,
h3 {
  color: var(--color-headings);
  margin-bottom: 1rem;
  line-height: 1.1;
}

/* h1 font size is 70 px so 7 rem */
h1 {
  font-size: 7rem;
}

h2 {
  font-size: 4rem;
}

h3 {
  font-size: 3rem;
  font-weight: 500; /*decreased the font weight so that it matches with the photoshop design */
  /* margin-bottom: 2rem; */
}

/* Making margin top as 0, so that h3 margin will be there which is 2 rem */
p {
  margin-top: 0;
}

/* Still there is more space between p and h3, on close checking, we find that the font itself has some space up and down the characters, so we need to adjust the bottom margin. All h tags in the photoshop of mobile have a 20px space, so instead of just giving h3 margin bottom, we can give to all h tags*/

@media screen and (min-width: 1000px) {
  body {
    font-size: 1.8rem;
  }

  h1 {
    font-size: 8rem;
  }

  h2 {
    font-size: 4rem;
  }

  h3 {
    font-size: 2.4rem;
  }
}

/* Links */
a {
  text-decoration: none;
}

.link-arrow {
  color: var(--color-accent);
  text-transform: uppercase;
  font-size: 2rem;
  font-weight: bold;
}

.link-arrow::after {
  content: "-->";
  margin-left: 5px; /*using absolute, as we need to have this amt of space no matter how large the font is */
  transition: margin 0.15s; /* adding smooth transition in hover effect */
}

/*  Adding a hover effect, such that the arrow moves right */
.link-arrow:hover::after {
  margin-left: 10px;
}

@media screen and (min-width: 1000px) {
  .link-arrow {
    font-size: 1.5rem;
  }
}

/* Badges */
/* Defining the structure of badge */

/* The badge font weight looks quite greater, so it needs less weight, so using weight 600 instead of bold */
.badge {
  border-radius: 20px;
  font-size: 2rem;
  font-weight: 600;
  padding: 0.5rem 2rem;
  white-space: nowrap; /* We dont want our badge text to be wrapped in the next line, even if we have limited space*/
}

/* Defining the skin of badge */
.badge--primary {
  background: var(--color-primary);
  color: #fff;
}

.badge--secondary {
  background: var(--color-secondary);
  color: #fff;
}

/* Now  defining different badge font size for small badges*/
.badge--small {
  font-size: 1.6rem;
}

/* Now handling larger screens */
@media screen and (min-width: 1000px) {
  .badge {
    font-size: 1.5rem;
  }

  .badge--small {
    font-size: 1.2rem;
    padding: 0.5rem 1rem;
  }
}

/* Lists */

.list {
  list-style-type: none;
  padding-left: 0; /* removing he default left padding */
}

.list__color {
  color: var(--color-headings);
}

.list--inline .list__item {
  display: inline-block;
  margin-right: 2rem;
}

.list--tick {
  list-style-image: url(../images/tick.svg);
  /* The ticks are invisible, so we need to apply a padding left*/
  padding-left: 3rem;
}

.list--tick .list__item {
  padding-left: 0.5rem;
  margin-bottom: 1rem;
}

@media screen and (min-width: 1000px) {
  .list--tick .list__item {
    padding-left: 0;
  }
}

/* Icons */
/* Using sprite gen. to combina all icons */
/* We used aboslute value,i.e, pixel in every icon width and height, as these measurement remained constant in the photoshop version */
.icon {
  height: 40px;
  width: 40px;
}

.icon--small {
  height: 30px;
  width: 30px;
}

.icon--primary {
  fill: var(--color-primary);
}

.icon--white {
  fill: #fff;
}

.icon-container {
  height: 64px;
  width: 64px;
  display: inline-flex;
  justify-content: center;
  align-items: center;
  background: #f3f9fa;
  border-radius: 100%;
}

.icon-container--accent {
  background: var(--color-accent);
}

/* Buttons */
.btn {
  border-radius: 40px;
  border: 0;
  cursor: pointer;
  font-size: 1.8rem;
  font-weight: 600;
  margin: 1rem 0;
  padding: 2rem 3rem;
  text-align: center; /*For anchor tag ,aka 'a'*/
  text-transform: uppercase;
  white-space: nowrap;
}

/* If there is a icon in button */
.btn .icon {
  width: 2rem;
  height: 2rem;
  margin-right: 1rem;
  vertical-align: middle; /* Aligning the icon in the middle vertically */
}

.btn--primary {
  background: var(--color-primary);
  color: #fff;
}

.btn--primary:hover {
  filter: brightness(0.9);
}

.btn--secondary {
  background: var(--color-secondary);
  color: #fff;
}

.btn--secondary:hover {
  filter: brightness(0.9);
}

.btn--accent {
  background: var(--color-accent);
  color: #fff;
}

.btn--accent:hover {
  filter: brightness(0.9);
}

/* For long buttons */
.btn--stretched {
  padding-left: 6rem;
  padding-right: 6rem;
}

/* Now applying he btn--block on a tag, its size becomes greater than screen, because, box-sizing is not applied, but in button, its applied by default */
.btn--block {
  display: inline-block;
  width: 100%;
}

.btn--outline {
  background: #fff;
  border: 2px solid var(--color-headings);
  color: var(--color-headings);
}

.btn--outline:hover {
  background: var(--color-headings);
  color: #fff;
}

@media screen and (min-width: 1000px) {
  .btn {
    font-size: 1.5rem;
  }
}

/* Inputs */
.input {
  border-radius: var(--border-radius);
  border: 1px solid var(--border-color);
  color: var(--color-headings);
  font-size: 2rem;
  outline: 0;
  padding: 1.5rem 3.5rem;
}

/* Changing the color of the placeholder */
::placeholder {
  color: #d4d2dd;
}

.input-group {
  border: 1px solid var(--border-color);
  border-radius: var(--border-radius);
  display: flex; /* Changing to flex so that the input field should take the entire leftover space */
}

.input-group .input {
  border: 0;
  flex-grow: 1;
  width: 0; /* so that on small screen, the search button doesnt gets out of the screen, remove the property and see the effect */
}

.input-group .btn {
  margin: 4px; /* Giving a absolute margin, so that space between button and text field should remain constant */
}

@media screen and (min-width: 1000px) {
  .input {
    font-size: 1.5rem;
  }
}

/* Cards */
.card {
  border-radius: 7px;
  box-shadow: 0 0 20px 10px #f3f3f3;
  overflow: hidden;
}

.card__header,
.card__body {
  padding: 2rem 3rem;
}

.card--primary .card__header {
  background: var(--color-primary);
  color: #fff;
}

.card--secondary .card__header {
  background: var(--color-secondary);
  color: #fff;
}

.card--secondary .badge--secondary {
  background: #02cdf1;
}

.card--primary .badge--primary {
  background: #126de4;
}

/* Plans */
.plan {
  transition: transform 0.3s;
}

.plan__name {
  color: #fff;
  font-size: 2.4rem;
  font-weight: 500;
  margin: 0;
}

.plan__price {
  font-size: 6rem;
}

.plan__billing-cycle {
  font-weight: 300;
  opacity: 0.8;
  margin-right: 1rem;
}

.plan__description {
  display: block;
  font-size: 2rem;
  letter-spacing: 1px;
  font-weight: 300;
}

.plan .list__item {
  margin-bottom: 2rem;
  letter-spacing: 1px;
}

.plan--popular .card__header {
  position: relative;
}

.plan--popular .card__header::before {
  content: url(../images/popular.svg);
  width: 40px;
  display: inline-block; /* as it is a inline element, to make sure width is applied we converted to inline-block */
  position: absolute;
  top: 0;
  right: 6%;
}

/* On mobile version all plans have same size and same hover effect */
.plan:hover {
  transform: scale(1.05);
}

@media screen and (min-width: 1000px) {
  /* On bigger screen, popular plan has initial more size and more hover zoom */
  .plan--popular {
    transform: scale(1.1);
  }
  .plan--popular:hover {
    transform: scale(1.15);
  }

  .plan__name {
    font-size: 1.4rem;
  }
  .plan__price {
    font-size: 5rem;
  }
  .plan__billing-cycle {
    font-size: 1.6rem;
  }
  .plan__description {
    font-size: 1.7rem;
  }
}

/* Media */
.media {
  display: flex;
  margin-bottom: 4rem; /*separate each media object*/
}

.media__title {
  margin-top: 0;
}

.media__body {
  margin: 0 2rem;
}

.media__image {
  margin-top: 1rem;
}

/* Quotes */
.quote {
  font-size: 3rem;
  font-style: italic;
  color: var(--color-body-darker);
  line-height: 1.3;
}

.quote__text::before {
  content: open-quote;
}

.quote__text::after {
  content: close-quote;
}

.quote__author {
  font-family: "Montserrat", sans-serif;
  font-style: normal;
  margin-bottom: 0;
}

.quote__organization {
  font-size: 2rem;
  font-style: normal;
  opacity: 0.4;
}

.quote__line {
  position: relative;
  bottom: 10px;
}

@media screen and (min-width: 1000px) {
  .quote {
    font-size: 2.4rem;
  }
  .quote__organization {
    font-size: 1.6rem;
  }
}

/* Grids */
.grid {
  display: grid;
}

@media screen and (min-width: 768px) {
  .grid--cols-2 {
    grid-template-columns: 1fr 1fr;
  }
}

@media screen and (min-width: 1000px) {
  .grid--cols-3 {
    grid-template-columns: 1fr 1fr 1fr;
  }
}

/* Testimonial */

.testimonial {
  padding: 3rem;
}
/* Selecting the direct child under testimonial_img */
.testimonial__image > img {
  width: 100%;
}

.testimonial__image {
  position: relative;
  margin: 0 3rem;
}

.testimonial__image > .icon-container {
  position: absolute;
  top: 3rem;
  right: -32px; /* As height and width of icon container is 64px, so used 32px */
}

@media screen and (min-width: 768px) {
  .testimonial .quote,
  .testimonial .quote__author {
    font-size: 2.4rem;
    line-height: 1.5;
  }

  .testimonial .quote {
    margin: 5rem 0 0 5rem;
  }

  .testimonial__image {
    margin: 0;
  }
}

/* Callouts */

.callout {
  padding: 4rem;
  border-radius: 5px;
}

.callout--primary {
  background: var(--color-primary);
  color: #fff;
}

.callout__heading {
  margin-top: 0;
  color: #fff;
}

/* The button is taking the entire right space, due to default grid align items and justify  items to be stretch*/

.callout .btn {
  align-self: center;
  justify-self: center;
  /* The button in photoshop has additional padding so adding another class for that in button section*/
}

.callout__content {
  text-align: center;
}

@media screen and (min-width: 768px) {
  /* If there is a grid in a callout, we need the second column to just take only required space, rest space to be taken by first column */
  .callout .grid--cols-2 {
    grid-template-columns: 1fr auto;
  }
  .callout__content {
    text-align: left;
  }

  /* For larger screen, we need to button to be closer to the content */
  .callout .btn {
    justify-self: start;
    margin: 0 2rem;
  }
}

/* Collapsibles */

.collapsible__header {
  display: flex;
  justify-content: space-between;
}

.collapsible__heading {
  margin-top: 0;
  font-size: 3rem;
}

.collapsible__chevron {
  transform: rotate(-90deg);
  transition: transform 0.3s;
}

.collapsible__content {
  /* display: none;
   But we cant animate display property like transform, so we can use max-height */
  max-height: 0;
  overflow: hidden; /* To hide the overflowed collapsible content,which was default set to visible */
  /* We can also add opacity for added trasnition */
  opacity: 0;
  transition: all 0.3s;
}

.collapsible--expanded .collapsible__chevron {
  transform: rotate(0);
}

.collapsible--expanded .collapsible__content {
  max-height: 100vh;
  opacity: 1;
}

/* Blocks */
.block {
  --padding-vertical: 6rem;
  padding: var(--padding-vertical) 2rem;
  /* border: 2px solid red; The border was just added to show the boundary of our container */
}

.block__header {
  /* as in photoshop in every block the header and the following paragraph is centred aligned */
  text-align: center;
}

/* Removing the top margin of h2 */
.block__heading {
  margin-top: 0;
}

.block--dark {
  background: #000;
  color: #7b858b;
}

.block--dark h1,
.block--dark h2,
.block--dark h3 {
  color: #fff;
}

.block--skewed-right {
  clip-path: polygon(0 0, 100% 0%, 100% 100%, 0 90%);
  /* But now the bottom padding is less than the top margin */
  padding-bottom: calc(var(--padding-vertical) + 4rem);
}

.block--skewed-left {
  clip-path: polygon(0 0, 100% 0%, 100% 90%, 0 100%);
  padding-bottom: calc(var(--padding-vertical) + 4rem);
}

/* Now in the photoshop design, the max width of the content is 1140px, so the background color may expand to fill the whole screen, but its inner content should only expand till 1140px and than be centred along the horizontal margin */
.container {
  max-width: 1140px;
  /* But now the contents became left aligned, but we need in the centre of the screen */
  margin: 0 auto;
}

/* Navigation bar */
.nav {
  background: #000;
  display: flex;
  justify-content: space-between; /* so that the two elements on the side get position in the side */
  flex-wrap: wrap; /* so that list can wrap to the next line */
  padding: 0 1rem;
  align-items: center; /* so that the toggler and list is aligned in the centre*/
}

.nav__list {
  width: 100%; /* giving full width so that it can wrap to next line */
  margin: 0; /* Remove the default margin of 2 rem of list */
}

.nav__item {
  padding: 0.5rem 2rem;
  border-bottom: 2px solid #222;
}

.nav__item > a {
  color: #d2d0db;
  transition: color 0.3s;
}
.nav__item > a:hover {
  color: #fff;
}

/* initially lowering the opacity so that if the toggler is toggled in mobile mode, it brightens up */
.nav__toggler {
  transition: all 0.3s; /* for opacity and box shadow*/
  cursor: pointer;
  opacity: 0.5;
}

.nav.collapsible--expanded .nav__toggler {
  opacity: 1;
  box-shadow: 0 0 0 3px #666;
  border-radius: 5px; /* Added border radius as our logo had rounded corner, and we applied a shadow on it so made the shadow also round */
}

/* Making the brand image at the centre, can use translate of transform or relative position */
.nav__brand {
  position: relative;
  top: 5px;
  opacity: 0.9;
}

@media screen and (min-width: 768px) {
  .nav__toggler {
    display: none; /* hiding  the toggler in large screen*/
  }
  .nav__list {
    width: auto; /* Changed the width so that now the logo and list go in the same line */
    display: flex;
    font-size: 1.6rem;
    /* But the list being a collapsible component, it is invisible */
    max-height: 100vh;
    opacity: 1;
  }
  .nav__item {
    border: 0;
  }
}

/* Hero component */
.hero__tagline {
  color: #8e969f;
  font-size: 2rem;
  letter-spacing: 1px;
  margin: 2rem 0 5rem;
}

/* adjust size of image */
.hero__image {
  width: 100%;
}

/* Our default skew left of block needs to be changed for hero component */
/* .hero {
  clip-path: polygon(0 0, 100% 0%, 100% 94%, 0 100%);
} no need as we hanged the default clip path*/

@media screen and (min-width: 768px) {
  .hero {
    /* removing the additional top space in desktop mode */
    padding-top: 0.5rem;
  }
  .hero__content {
    text-align: left;
    align-self: center; /* For align the content inside the grid */
  }
}

/* Domain BLock */
.block-domain .input-group {
  box-shadow: 0 0 30px 20px #e6ebee;
  border: 0;
  margin: 4rem auto; /* For centre aligning the list item if width is greater than 730px */
  max-width: 650px;
}

.block-domain__prices {
  display: grid;
  grid-template-columns: repeat(3, 1fr);
  grid-template-rows: repeat(2, 6rem);
  font-size: 2rem;
  font-weight: 600;
  justify-items: center;
  max-width: 730px;
  margin: 0 auto; /* For centre aligning the list item if width is greater than 730px */
}

@media screen and (min-width: 768px) {
  .block-domain__prices {
    /* grid-template-columns: repeat(6, 1fr); */
    /* Or we can use auto-fit */
    grid-template-columns: repeat(auto-fit, minmax(100px, 1fr));
  }
}

/* Plans block*/
.block-plans .grid {
  gap: 8rem 4rem; /* Added row gap of 8 rem for mobiles and 4rem column gap for desktop */
}

.block-plans .card {
  max-width: 500px;
  margin: 0 auto; /*Aligning the cards in the centre for mobile display*/
}

/* Features block */
.feature__img {
  width: 100%;
}

.feature {
  gap: 4rem 2rem; /*4 rem for mobile row wise,2 rem column wise for desktop*/
  margin: 12rem 0; /*separating the individual features from each other */
}

.feature__heading {
  margin-top: 1rem 0; /*decreasing the margin below each icon */
}

.feature:first-of-type {
  margin-top: 6rem; /*Decreasing top margin for the first feature*/
}

/* Making order of even features reverse */
@media screen and (min-width: 768px) {
  .feature:nth-of-type(even) .feature__content {
    order: 2;
  }
}

/* Showcase block*/
.block-showcase__image > img {
  width: 100%;
}

@media screen and (min-width: 768px) {
  .block-showcase .grid {
    grid-template-columns: 50% 50%; /*so that half of the grid goes to both columns*/
  }

  .block-showcase__image {
    justify-self: end; /*making image justify to end of the column, and not slide under the text*/
  }

  .block-showcase__image > img {
    width: auto; /* Now the image can expand */
    max-width: 700px; /* till 700px*/
  }
}
